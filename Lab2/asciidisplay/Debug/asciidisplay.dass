
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define 	STK_VAL 		((volatile unsigned int *) 0xE000E018)
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9c3 	bl	2000038e <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

/*
 * Konfigurerar port E så att den kan användas som en utport
 */
void init_app()
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIO_E_MODER = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <ascii_init>:

/*
 * Konfigurerar ascii-displayen med korrekt inställningar
 */
void ascii_init()
{
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_clear(B_RS);
2000002c:	2001      	movs	r0, #1
2000002e:	f000 f885 	bl	2000013c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000032:	2002      	movs	r0, #2
20000034:	f000 f882 	bl	2000013c <ascii_ctrl_bit_clear>
    ascii_command(0x38); // Function Set: 2 rader och 5x8 punkters tecken
20000038:	2038      	movs	r0, #56	; 0x38
2000003a:	f000 f93f 	bl	200002bc <ascii_command>
    ascii_command(0xF); // Display Control: Tänd display, tänd markör (cursor) och konstant visning
2000003e:	200f      	movs	r0, #15
20000040:	f000 f93c 	bl	200002bc <ascii_command>
    ascii_command(1); // Clear Display
20000044:	2001      	movs	r0, #1
20000046:	f000 f939 	bl	200002bc <ascii_command>
    ascii_command(6); // Entry Mode Set: Adressing med "increment"; inget skift av adressbufferten
2000004a:	2006      	movs	r0, #6
2000004c:	f000 f936 	bl	200002bc <ascii_command>
}
20000050:	46c0      	nop			; (mov r8, r8)
20000052:	46bd      	mov	sp, r7
20000054:	bd80      	pop	{r7, pc}

20000056 <delay_250ns>:

/*
 * Funktion som gör så att simulatorn "sover" i 250 nanosekunder
 */
void delay_250ns(void)
{
20000056:	b580      	push	{r7, lr}
20000058:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000005a:	4b0c      	ldr	r3, [pc, #48]	; (2000008c <delay_250ns+0x36>)
2000005c:	2200      	movs	r2, #0
2000005e:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1 );
20000060:	4b0b      	ldr	r3, [pc, #44]	; (20000090 <delay_250ns+0x3a>)
20000062:	2229      	movs	r2, #41	; 0x29
20000064:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000066:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <delay_250ns+0x3e>)
20000068:	2200      	movs	r2, #0
2000006a:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <delay_250ns+0x36>)
2000006e:	2205      	movs	r2, #5
20000070:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	4b05      	ldr	r3, [pc, #20]	; (2000008c <delay_250ns+0x36>)
20000076:	681a      	ldr	r2, [r3, #0]
20000078:	2380      	movs	r3, #128	; 0x80
2000007a:	025b      	lsls	r3, r3, #9
2000007c:	4013      	ands	r3, r2
2000007e:	d0f9      	beq.n	20000074 <delay_250ns+0x1e>
	*STK_CTRL = 0;
20000080:	4b02      	ldr	r3, [pc, #8]	; (2000008c <delay_250ns+0x36>)
20000082:	2200      	movs	r2, #0
20000084:	601a      	str	r2, [r3, #0]
}
20000086:	46c0      	nop			; (mov r8, r8)
20000088:	46bd      	mov	sp, r7
2000008a:	bd80      	pop	{r7, pc}
2000008c:	e000e010 	and	lr, r0, r0, lsl r0
20000090:	e000e014 	and	lr, r0, r4, lsl r0
20000094:	e000e018 	and	lr, r0, r8, lsl r0

20000098 <delay_micro>:

/*
 * Funktion som gör så att simulatorn "sover" i us antal mikrosekunder
 */
void delay_micro(unsigned int us)
{
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		us = us / 2000;
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	22fa      	movs	r2, #250	; 0xfa
200000a4:	00d1      	lsls	r1, r2, #3
200000a6:	0018      	movs	r0, r3
200000a8:	f000 f99a 	bl	200003e0 <__udivsi3>
200000ac:	0003      	movs	r3, r0
200000ae:	607b      	str	r3, [r7, #4]
		us++;
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	3301      	adds	r3, #1
200000b4:	607b      	str	r3, [r7, #4]
	#endif
	
	while(us > 0)
200000b6:	e00a      	b.n	200000ce <delay_micro+0x36>
	{
		delay_250ns();
200000b8:	f7ff ffcd 	bl	20000056 <delay_250ns>
		delay_250ns();
200000bc:	f7ff ffcb 	bl	20000056 <delay_250ns>
		delay_250ns();
200000c0:	f7ff ffc9 	bl	20000056 <delay_250ns>
		delay_250ns();
200000c4:	f7ff ffc7 	bl	20000056 <delay_250ns>
		us--;
200000c8:	687b      	ldr	r3, [r7, #4]
200000ca:	3b01      	subs	r3, #1
200000cc:	607b      	str	r3, [r7, #4]
	while(us > 0)
200000ce:	687b      	ldr	r3, [r7, #4]
200000d0:	2b00      	cmp	r3, #0
200000d2:	d1f1      	bne.n	200000b8 <delay_micro+0x20>
	}
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46bd      	mov	sp, r7
200000da:	b002      	add	sp, #8
200000dc:	bd80      	pop	{r7, pc}

200000de <delay_milli>:

/*
 * Funktion som gör så att simulatorn "sover" i ms antal millisekunder
 */
void delay_milli(unsigned int ms)
{
200000de:	b580      	push	{r7, lr}
200000e0:	b082      	sub	sp, #8
200000e2:	af00      	add	r7, sp, #0
200000e4:	6078      	str	r0, [r7, #4]
	delay_micro(ms*1000);
200000e6:	687a      	ldr	r2, [r7, #4]
200000e8:	0013      	movs	r3, r2
200000ea:	015b      	lsls	r3, r3, #5
200000ec:	1a9b      	subs	r3, r3, r2
200000ee:	009b      	lsls	r3, r3, #2
200000f0:	189b      	adds	r3, r3, r2
200000f2:	00db      	lsls	r3, r3, #3
200000f4:	0018      	movs	r0, r3
200000f6:	f7ff ffcf 	bl	20000098 <delay_micro>
}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	46bd      	mov	sp, r7
200000fe:	b002      	add	sp, #8
20000100:	bd80      	pop	{r7, pc}

20000102 <ascii_ctrl_bit_set>:

/*
 * Sätter en bit till 1, med den givna bitmasken x
 */
void ascii_ctrl_bit_set(unsigned char x) {
20000102:	b580      	push	{r7, lr}
20000104:	b084      	sub	sp, #16
20000106:	af00      	add	r7, sp, #0
20000108:	0002      	movs	r2, r0
2000010a:	1dfb      	adds	r3, r7, #7
2000010c:	701a      	strb	r2, [r3, #0]
	char c;
    c = *GPIO_E_ODR_LOW;
2000010e:	4a0a      	ldr	r2, [pc, #40]	; (20000138 <ascii_ctrl_bit_set+0x36>)
20000110:	210f      	movs	r1, #15
20000112:	187b      	adds	r3, r7, r1
20000114:	7812      	ldrb	r2, [r2, #0]
20000116:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW = B_SELECT | x | c;
20000118:	1dfa      	adds	r2, r7, #7
2000011a:	187b      	adds	r3, r7, r1
2000011c:	7812      	ldrb	r2, [r2, #0]
2000011e:	781b      	ldrb	r3, [r3, #0]
20000120:	4313      	orrs	r3, r2
20000122:	b2db      	uxtb	r3, r3
20000124:	4a04      	ldr	r2, [pc, #16]	; (20000138 <ascii_ctrl_bit_set+0x36>)
20000126:	2104      	movs	r1, #4
20000128:	430b      	orrs	r3, r1
2000012a:	b2db      	uxtb	r3, r3
2000012c:	7013      	strb	r3, [r2, #0]
}
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	46bd      	mov	sp, r7
20000132:	b004      	add	sp, #16
20000134:	bd80      	pop	{r7, pc}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	40021014 	andmi	r1, r2, r4, lsl r0

2000013c <ascii_ctrl_bit_clear>:

/*
 * Sätter en bit till 0, med den givna bitmasken x
 */
void ascii_ctrl_bit_clear(unsigned char x) {
2000013c:	b580      	push	{r7, lr}
2000013e:	b084      	sub	sp, #16
20000140:	af00      	add	r7, sp, #0
20000142:	0002      	movs	r2, r0
20000144:	1dfb      	adds	r3, r7, #7
20000146:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
20000148:	4a0d      	ldr	r2, [pc, #52]	; (20000180 <ascii_ctrl_bit_clear+0x44>)
2000014a:	210f      	movs	r1, #15
2000014c:	187b      	adds	r3, r7, r1
2000014e:	7812      	ldrb	r2, [r2, #0]
20000150:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
20000152:	1dfb      	adds	r3, r7, #7
20000154:	781b      	ldrb	r3, [r3, #0]
20000156:	b25b      	sxtb	r3, r3
20000158:	43db      	mvns	r3, r3
2000015a:	b25b      	sxtb	r3, r3
2000015c:	187a      	adds	r2, r7, r1
2000015e:	7812      	ldrb	r2, [r2, #0]
20000160:	b252      	sxtb	r2, r2
20000162:	4013      	ands	r3, r2
20000164:	b25a      	sxtb	r2, r3
20000166:	187b      	adds	r3, r7, r1
20000168:	701a      	strb	r2, [r3, #0]
	*GPIO_E_ODR_LOW = B_SELECT | c;
2000016a:	4a05      	ldr	r2, [pc, #20]	; (20000180 <ascii_ctrl_bit_clear+0x44>)
2000016c:	187b      	adds	r3, r7, r1
2000016e:	781b      	ldrb	r3, [r3, #0]
20000170:	2104      	movs	r1, #4
20000172:	430b      	orrs	r3, r1
20000174:	b2db      	uxtb	r3, r3
20000176:	7013      	strb	r3, [r2, #0]
}
20000178:	46c0      	nop			; (mov r8, r8)
2000017a:	46bd      	mov	sp, r7
2000017c:	b004      	add	sp, #16
2000017e:	bd80      	pop	{r7, pc}
20000180:	40021014 	andmi	r1, r2, r4, lsl r0

20000184 <ascii_write_controller>:
/*
 * Skriver data till ascii-displayens kontroller
 */
void ascii_write_controller(char c) {
20000184:	b580      	push	{r7, lr}
20000186:	b082      	sub	sp, #8
20000188:	af00      	add	r7, sp, #0
2000018a:	0002      	movs	r2, r0
2000018c:	1dfb      	adds	r3, r7, #7
2000018e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000190:	2040      	movs	r0, #64	; 0x40
20000192:	f7ff ffb6 	bl	20000102 <ascii_ctrl_bit_set>
	*GPIO_E_ODR_HIGH = c;
20000196:	4a06      	ldr	r2, [pc, #24]	; (200001b0 <ascii_write_controller+0x2c>)
20000198:	1dfb      	adds	r3, r7, #7
2000019a:	781b      	ldrb	r3, [r3, #0]
2000019c:	7013      	strb	r3, [r2, #0]
	ascii_ctrl_bit_clear(B_E);
2000019e:	2040      	movs	r0, #64	; 0x40
200001a0:	f7ff ffcc 	bl	2000013c <ascii_ctrl_bit_clear>
	delay_250ns();
200001a4:	f7ff ff57 	bl	20000056 <delay_250ns>
}
200001a8:	46c0      	nop			; (mov r8, r8)
200001aa:	46bd      	mov	sp, r7
200001ac:	b002      	add	sp, #8
200001ae:	bd80      	pop	{r7, pc}
200001b0:	40021015 	andmi	r1, r2, r5, lsl r0

200001b4 <ascii_write_cmd>:

/*
 * Skriver ett kommando till ascii-displayens kontroller
 */
void ascii_write_cmd(unsigned char command)
{
200001b4:	b580      	push	{r7, lr}
200001b6:	b082      	sub	sp, #8
200001b8:	af00      	add	r7, sp, #0
200001ba:	0002      	movs	r2, r0
200001bc:	1dfb      	adds	r3, r7, #7
200001be:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200001c0:	2001      	movs	r0, #1
200001c2:	f7ff ffbb 	bl	2000013c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200001c6:	2002      	movs	r0, #2
200001c8:	f7ff ffb8 	bl	2000013c <ascii_ctrl_bit_clear>
	
	ascii_write_controller(command);
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	0018      	movs	r0, r3
200001d2:	f7ff ffd7 	bl	20000184 <ascii_write_controller>
}
200001d6:	46c0      	nop			; (mov r8, r8)
200001d8:	46bd      	mov	sp, r7
200001da:	b002      	add	sp, #8
200001dc:	bd80      	pop	{r7, pc}

200001de <ascii_write_data>:

/*
 * Skriver data till ascii-displayen
 */
void ascii_write_data(unsigned char data)
{
200001de:	b580      	push	{r7, lr}
200001e0:	b082      	sub	sp, #8
200001e2:	af00      	add	r7, sp, #0
200001e4:	0002      	movs	r2, r0
200001e6:	1dfb      	adds	r3, r7, #7
200001e8:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200001ea:	2001      	movs	r0, #1
200001ec:	f7ff ff89 	bl	20000102 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200001f0:	2002      	movs	r0, #2
200001f2:	f7ff ffa3 	bl	2000013c <ascii_ctrl_bit_clear>
	
	ascii_write_controller(data);
200001f6:	1dfb      	adds	r3, r7, #7
200001f8:	781b      	ldrb	r3, [r3, #0]
200001fa:	0018      	movs	r0, r3
200001fc:	f7ff ffc2 	bl	20000184 <ascii_write_controller>
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}

20000208 <ascii_read_controller>:

/*
 * Läser data från ascii-displayens kontroller
 */
unsigned char ascii_read_controller(void) {
20000208:	b580      	push	{r7, lr}
2000020a:	b082      	sub	sp, #8
2000020c:	af00      	add	r7, sp, #0
	char c;
	ascii_ctrl_bit_set(B_E);
2000020e:	2040      	movs	r0, #64	; 0x40
20000210:	f7ff ff77 	bl	20000102 <ascii_ctrl_bit_set>
	delay_250ns();
20000214:	f7ff ff1f 	bl	20000056 <delay_250ns>
	delay_250ns();
20000218:	f7ff ff1d 	bl	20000056 <delay_250ns>
	c = *GPIO_E_IDR_HIGH;
2000021c:	4a06      	ldr	r2, [pc, #24]	; (20000238 <ascii_read_controller+0x30>)
2000021e:	1dfb      	adds	r3, r7, #7
20000220:	7812      	ldrb	r2, [r2, #0]
20000222:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000224:	2040      	movs	r0, #64	; 0x40
20000226:	f7ff ff89 	bl	2000013c <ascii_ctrl_bit_clear>
	return c;
2000022a:	1dfb      	adds	r3, r7, #7
2000022c:	781b      	ldrb	r3, [r3, #0]
}
2000022e:	0018      	movs	r0, r3
20000230:	46bd      	mov	sp, r7
20000232:	b002      	add	sp, #8
20000234:	bd80      	pop	{r7, pc}
20000236:	46c0      	nop			; (mov r8, r8)
20000238:	40021011 	andmi	r1, r2, r1, lsl r0

2000023c <ascii_read_status>:

/*
 * Läser ascii-displayens status
 */
unsigned char ascii_read_status() {
2000023c:	b590      	push	{r4, r7, lr}
2000023e:	b083      	sub	sp, #12
20000240:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555;
20000242:	4b0b      	ldr	r3, [pc, #44]	; (20000270 <ascii_read_status+0x34>)
20000244:	4a0b      	ldr	r2, [pc, #44]	; (20000274 <ascii_read_status+0x38>)
20000246:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000248:	2002      	movs	r0, #2
2000024a:	f7ff ff5a 	bl	20000102 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
2000024e:	2001      	movs	r0, #1
20000250:	f7ff ff74 	bl	2000013c <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
20000254:	1dfc      	adds	r4, r7, #7
20000256:	f7ff ffd7 	bl	20000208 <ascii_read_controller>
2000025a:	0003      	movs	r3, r0
2000025c:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER = 0x55555555;
2000025e:	4b04      	ldr	r3, [pc, #16]	; (20000270 <ascii_read_status+0x34>)
20000260:	4a05      	ldr	r2, [pc, #20]	; (20000278 <ascii_read_status+0x3c>)
20000262:	601a      	str	r2, [r3, #0]
	return c;
20000264:	1dfb      	adds	r3, r7, #7
20000266:	781b      	ldrb	r3, [r3, #0]
}
20000268:	0018      	movs	r0, r3
2000026a:	46bd      	mov	sp, r7
2000026c:	b003      	add	sp, #12
2000026e:	bd90      	pop	{r4, r7, pc}
20000270:	40021000 	andmi	r1, r2, r0
20000274:	00005555 	andeq	r5, r0, r5, asr r5
20000278:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000027c <ascii_read_data>:

/*
 * Läser data från ascii-displayen
 */
unsigned char ascii_read_data(void)
{
2000027c:	b590      	push	{r4, r7, lr}
2000027e:	b083      	sub	sp, #12
20000280:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555;
20000282:	4b0b      	ldr	r3, [pc, #44]	; (200002b0 <ascii_read_data+0x34>)
20000284:	4a0b      	ldr	r2, [pc, #44]	; (200002b4 <ascii_read_data+0x38>)
20000286:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000288:	2001      	movs	r0, #1
2000028a:	f7ff ff3a 	bl	20000102 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
2000028e:	2002      	movs	r0, #2
20000290:	f7ff ff37 	bl	20000102 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
20000294:	1dfc      	adds	r4, r7, #7
20000296:	f7ff ffb7 	bl	20000208 <ascii_read_controller>
2000029a:	0003      	movs	r3, r0
2000029c:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER = 0x55555555;
2000029e:	4b04      	ldr	r3, [pc, #16]	; (200002b0 <ascii_read_data+0x34>)
200002a0:	4a05      	ldr	r2, [pc, #20]	; (200002b8 <ascii_read_data+0x3c>)
200002a2:	601a      	str	r2, [r3, #0]
	return c;
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	781b      	ldrb	r3, [r3, #0]
}
200002a8:	0018      	movs	r0, r3
200002aa:	46bd      	mov	sp, r7
200002ac:	b003      	add	sp, #12
200002ae:	bd90      	pop	{r4, r7, pc}
200002b0:	40021000 	andmi	r1, r2, r0
200002b4:	00005555 	andeq	r5, r0, r5, asr r5
200002b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002bc <ascii_command>:

/*
 * Skickat ett kommando till ascii-displayen
 */
void ascii_command(unsigned char command)
{
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	0002      	movs	r2, r0
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80);
200002c8:	46c0      	nop			; (mov r8, r8)
200002ca:	f7ff ffb7 	bl	2000023c <ascii_read_status>
200002ce:	0003      	movs	r3, r0
200002d0:	001a      	movs	r2, r3
200002d2:	2380      	movs	r3, #128	; 0x80
200002d4:	4013      	ands	r3, r2
200002d6:	2b80      	cmp	r3, #128	; 0x80
200002d8:	d0f7      	beq.n	200002ca <ascii_command+0xe>
	delay_micro(8);
200002da:	2008      	movs	r0, #8
200002dc:	f7ff fedc 	bl	20000098 <delay_micro>
	ascii_write_cmd(command);
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	0018      	movs	r0, r3
200002e6:	f7ff ff65 	bl	200001b4 <ascii_write_cmd>
	
	if((command == 1 || (command & 2) == 2)) 	delay_milli(2);
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	2b01      	cmp	r3, #1
200002f0:	d004      	beq.n	200002fc <ascii_command+0x40>
200002f2:	1dfb      	adds	r3, r7, #7
200002f4:	781b      	ldrb	r3, [r3, #0]
200002f6:	2202      	movs	r2, #2
200002f8:	4013      	ands	r3, r2
200002fa:	d003      	beq.n	20000304 <ascii_command+0x48>
200002fc:	2002      	movs	r0, #2
200002fe:	f7ff feee 	bl	200000de <delay_milli>
20000302:	e002      	b.n	2000030a <ascii_command+0x4e>
	else if((command & 0x40) == 1) return;
	else delay_micro(45);
20000304:	202d      	movs	r0, #45	; 0x2d
20000306:	f7ff fec7 	bl	20000098 <delay_micro>
}
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}

20000310 <ascii_write_char>:

/*
 * Skriver en given char c till ascii-displayen
 */
void ascii_write_char(unsigned char c)
{
20000310:	b580      	push	{r7, lr}
20000312:	b082      	sub	sp, #8
20000314:	af00      	add	r7, sp, #0
20000316:	0002      	movs	r2, r0
20000318:	1dfb      	adds	r3, r7, #7
2000031a:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80);
2000031c:	46c0      	nop			; (mov r8, r8)
2000031e:	f7ff ff8d 	bl	2000023c <ascii_read_status>
20000322:	0003      	movs	r3, r0
20000324:	001a      	movs	r2, r3
20000326:	2380      	movs	r3, #128	; 0x80
20000328:	4013      	ands	r3, r2
2000032a:	2b80      	cmp	r3, #128	; 0x80
2000032c:	d0f7      	beq.n	2000031e <ascii_write_char+0xe>
	delay_micro(8);
2000032e:	2008      	movs	r0, #8
20000330:	f7ff feb2 	bl	20000098 <delay_micro>
	ascii_write_data(c);
20000334:	1dfb      	adds	r3, r7, #7
20000336:	781b      	ldrb	r3, [r3, #0]
20000338:	0018      	movs	r0, r3
2000033a:	f7ff ff50 	bl	200001de <ascii_write_data>
	delay_micro(45);
2000033e:	202d      	movs	r0, #45	; 0x2d
20000340:	f7ff feaa 	bl	20000098 <delay_micro>
}
20000344:	46c0      	nop			; (mov r8, r8)
20000346:	46bd      	mov	sp, r7
20000348:	b002      	add	sp, #8
2000034a:	bd80      	pop	{r7, pc}

2000034c <ascii_gotoxy>:

/*
 * Ändrar på den aktiva raden och columnen
 */
void ascii_gotoxy(unsigned char row, unsigned char col)
{
2000034c:	b580      	push	{r7, lr}
2000034e:	b084      	sub	sp, #16
20000350:	af00      	add	r7, sp, #0
20000352:	0002      	movs	r2, r0
20000354:	1dfb      	adds	r3, r7, #7
20000356:	701a      	strb	r2, [r3, #0]
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	1c0a      	adds	r2, r1, #0
2000035c:	701a      	strb	r2, [r3, #0]
	unsigned int address = row - 1;
2000035e:	1dfb      	adds	r3, r7, #7
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	3b01      	subs	r3, #1
20000364:	60fb      	str	r3, [r7, #12]
	if(col == 2) address = address + 0x40;
20000366:	1dbb      	adds	r3, r7, #6
20000368:	781b      	ldrb	r3, [r3, #0]
2000036a:	2b02      	cmp	r3, #2
2000036c:	d102      	bne.n	20000374 <ascii_gotoxy+0x28>
2000036e:	68fb      	ldr	r3, [r7, #12]
20000370:	3340      	adds	r3, #64	; 0x40
20000372:	60fb      	str	r3, [r7, #12]
	ascii_write_cmd(0x80 | address);
20000374:	68fb      	ldr	r3, [r7, #12]
20000376:	b2db      	uxtb	r3, r3
20000378:	2280      	movs	r2, #128	; 0x80
2000037a:	4252      	negs	r2, r2
2000037c:	4313      	orrs	r3, r2
2000037e:	b2db      	uxtb	r3, r3
20000380:	0018      	movs	r0, r3
20000382:	f7ff ff17 	bl	200001b4 <ascii_write_cmd>
}
20000386:	46c0      	nop			; (mov r8, r8)
20000388:	46bd      	mov	sp, r7
2000038a:	b004      	add	sp, #16
2000038c:	bd80      	pop	{r7, pc}

2000038e <main>:

/* 
 * Används för att returna den knappen som är nertryckt
 */
void main(void)
{
2000038e:	b590      	push	{r4, r7, lr}
20000390:	b089      	sub	sp, #36	; 0x24
20000392:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk ";
20000394:	2310      	movs	r3, #16
20000396:	18fb      	adds	r3, r7, r3
20000398:	4a0e      	ldr	r2, [pc, #56]	; (200003d4 <main+0x46>)
2000039a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000039c:	c313      	stmia	r3!, {r0, r1, r4}
2000039e:	8812      	ldrh	r2, [r2, #0]
200003a0:	801a      	strh	r2, [r3, #0]
	char test2[] = "Display - test";
200003a2:	003b      	movs	r3, r7
200003a4:	4a0c      	ldr	r2, [pc, #48]	; (200003d8 <main+0x4a>)
200003a6:	ca13      	ldmia	r2!, {r0, r1, r4}
200003a8:	c313      	stmia	r3!, {r0, r1, r4}
200003aa:	8811      	ldrh	r1, [r2, #0]
200003ac:	8019      	strh	r1, [r3, #0]
200003ae:	7892      	ldrb	r2, [r2, #2]
200003b0:	709a      	strb	r2, [r3, #2]
	init_app();
200003b2:	f7ff fe2d 	bl	20000010 <init_app>
	ascii_init();
200003b6:	f7ff fe37 	bl	20000028 <ascii_init>
	ascii_gotoxy(1,1);
200003ba:	2101      	movs	r1, #1
200003bc:	2001      	movs	r0, #1
200003be:	f7ff ffc5 	bl	2000034c <ascii_gotoxy>
	ascii_write_data("34");
200003c2:	4b06      	ldr	r3, [pc, #24]	; (200003dc <main+0x4e>)
200003c4:	b2db      	uxtb	r3, r3
200003c6:	0018      	movs	r0, r3
200003c8:	f7ff ff09 	bl	200001de <ascii_write_data>
	ascii_gotoxy(1,2);
	s = test2;
	while(*s)
		ascii_write_char(*s++);
	return 0; */
200003cc:	46c0      	nop			; (mov r8, r8)
200003ce:	46bd      	mov	sp, r7
200003d0:	b009      	add	sp, #36	; 0x24
200003d2:	bd90      	pop	{r4, r7, pc}
200003d4:	200004fc 	strdcs	r0, [r0], -ip
200003d8:	2000050c 	andcs	r0, r0, ip, lsl #10
200003dc:	200004f8 	strdcs	r0, [r0], -r8

200003e0 <__udivsi3>:
200003e0:	2200      	movs	r2, #0
200003e2:	0843      	lsrs	r3, r0, #1
200003e4:	428b      	cmp	r3, r1
200003e6:	d374      	bcc.n	200004d2 <__udivsi3+0xf2>
200003e8:	0903      	lsrs	r3, r0, #4
200003ea:	428b      	cmp	r3, r1
200003ec:	d35f      	bcc.n	200004ae <__udivsi3+0xce>
200003ee:	0a03      	lsrs	r3, r0, #8
200003f0:	428b      	cmp	r3, r1
200003f2:	d344      	bcc.n	2000047e <__udivsi3+0x9e>
200003f4:	0b03      	lsrs	r3, r0, #12
200003f6:	428b      	cmp	r3, r1
200003f8:	d328      	bcc.n	2000044c <__udivsi3+0x6c>
200003fa:	0c03      	lsrs	r3, r0, #16
200003fc:	428b      	cmp	r3, r1
200003fe:	d30d      	bcc.n	2000041c <__udivsi3+0x3c>
20000400:	22ff      	movs	r2, #255	; 0xff
20000402:	0209      	lsls	r1, r1, #8
20000404:	ba12      	rev	r2, r2
20000406:	0c03      	lsrs	r3, r0, #16
20000408:	428b      	cmp	r3, r1
2000040a:	d302      	bcc.n	20000412 <__udivsi3+0x32>
2000040c:	1212      	asrs	r2, r2, #8
2000040e:	0209      	lsls	r1, r1, #8
20000410:	d065      	beq.n	200004de <__udivsi3+0xfe>
20000412:	0b03      	lsrs	r3, r0, #12
20000414:	428b      	cmp	r3, r1
20000416:	d319      	bcc.n	2000044c <__udivsi3+0x6c>
20000418:	e000      	b.n	2000041c <__udivsi3+0x3c>
2000041a:	0a09      	lsrs	r1, r1, #8
2000041c:	0bc3      	lsrs	r3, r0, #15
2000041e:	428b      	cmp	r3, r1
20000420:	d301      	bcc.n	20000426 <__udivsi3+0x46>
20000422:	03cb      	lsls	r3, r1, #15
20000424:	1ac0      	subs	r0, r0, r3
20000426:	4152      	adcs	r2, r2
20000428:	0b83      	lsrs	r3, r0, #14
2000042a:	428b      	cmp	r3, r1
2000042c:	d301      	bcc.n	20000432 <__udivsi3+0x52>
2000042e:	038b      	lsls	r3, r1, #14
20000430:	1ac0      	subs	r0, r0, r3
20000432:	4152      	adcs	r2, r2
20000434:	0b43      	lsrs	r3, r0, #13
20000436:	428b      	cmp	r3, r1
20000438:	d301      	bcc.n	2000043e <__udivsi3+0x5e>
2000043a:	034b      	lsls	r3, r1, #13
2000043c:	1ac0      	subs	r0, r0, r3
2000043e:	4152      	adcs	r2, r2
20000440:	0b03      	lsrs	r3, r0, #12
20000442:	428b      	cmp	r3, r1
20000444:	d301      	bcc.n	2000044a <__udivsi3+0x6a>
20000446:	030b      	lsls	r3, r1, #12
20000448:	1ac0      	subs	r0, r0, r3
2000044a:	4152      	adcs	r2, r2
2000044c:	0ac3      	lsrs	r3, r0, #11
2000044e:	428b      	cmp	r3, r1
20000450:	d301      	bcc.n	20000456 <__udivsi3+0x76>
20000452:	02cb      	lsls	r3, r1, #11
20000454:	1ac0      	subs	r0, r0, r3
20000456:	4152      	adcs	r2, r2
20000458:	0a83      	lsrs	r3, r0, #10
2000045a:	428b      	cmp	r3, r1
2000045c:	d301      	bcc.n	20000462 <__udivsi3+0x82>
2000045e:	028b      	lsls	r3, r1, #10
20000460:	1ac0      	subs	r0, r0, r3
20000462:	4152      	adcs	r2, r2
20000464:	0a43      	lsrs	r3, r0, #9
20000466:	428b      	cmp	r3, r1
20000468:	d301      	bcc.n	2000046e <__udivsi3+0x8e>
2000046a:	024b      	lsls	r3, r1, #9
2000046c:	1ac0      	subs	r0, r0, r3
2000046e:	4152      	adcs	r2, r2
20000470:	0a03      	lsrs	r3, r0, #8
20000472:	428b      	cmp	r3, r1
20000474:	d301      	bcc.n	2000047a <__udivsi3+0x9a>
20000476:	020b      	lsls	r3, r1, #8
20000478:	1ac0      	subs	r0, r0, r3
2000047a:	4152      	adcs	r2, r2
2000047c:	d2cd      	bcs.n	2000041a <__udivsi3+0x3a>
2000047e:	09c3      	lsrs	r3, r0, #7
20000480:	428b      	cmp	r3, r1
20000482:	d301      	bcc.n	20000488 <__udivsi3+0xa8>
20000484:	01cb      	lsls	r3, r1, #7
20000486:	1ac0      	subs	r0, r0, r3
20000488:	4152      	adcs	r2, r2
2000048a:	0983      	lsrs	r3, r0, #6
2000048c:	428b      	cmp	r3, r1
2000048e:	d301      	bcc.n	20000494 <__udivsi3+0xb4>
20000490:	018b      	lsls	r3, r1, #6
20000492:	1ac0      	subs	r0, r0, r3
20000494:	4152      	adcs	r2, r2
20000496:	0943      	lsrs	r3, r0, #5
20000498:	428b      	cmp	r3, r1
2000049a:	d301      	bcc.n	200004a0 <__udivsi3+0xc0>
2000049c:	014b      	lsls	r3, r1, #5
2000049e:	1ac0      	subs	r0, r0, r3
200004a0:	4152      	adcs	r2, r2
200004a2:	0903      	lsrs	r3, r0, #4
200004a4:	428b      	cmp	r3, r1
200004a6:	d301      	bcc.n	200004ac <__udivsi3+0xcc>
200004a8:	010b      	lsls	r3, r1, #4
200004aa:	1ac0      	subs	r0, r0, r3
200004ac:	4152      	adcs	r2, r2
200004ae:	08c3      	lsrs	r3, r0, #3
200004b0:	428b      	cmp	r3, r1
200004b2:	d301      	bcc.n	200004b8 <__udivsi3+0xd8>
200004b4:	00cb      	lsls	r3, r1, #3
200004b6:	1ac0      	subs	r0, r0, r3
200004b8:	4152      	adcs	r2, r2
200004ba:	0883      	lsrs	r3, r0, #2
200004bc:	428b      	cmp	r3, r1
200004be:	d301      	bcc.n	200004c4 <__udivsi3+0xe4>
200004c0:	008b      	lsls	r3, r1, #2
200004c2:	1ac0      	subs	r0, r0, r3
200004c4:	4152      	adcs	r2, r2
200004c6:	0843      	lsrs	r3, r0, #1
200004c8:	428b      	cmp	r3, r1
200004ca:	d301      	bcc.n	200004d0 <__udivsi3+0xf0>
200004cc:	004b      	lsls	r3, r1, #1
200004ce:	1ac0      	subs	r0, r0, r3
200004d0:	4152      	adcs	r2, r2
200004d2:	1a41      	subs	r1, r0, r1
200004d4:	d200      	bcs.n	200004d8 <__udivsi3+0xf8>
200004d6:	4601      	mov	r1, r0
200004d8:	4152      	adcs	r2, r2
200004da:	4610      	mov	r0, r2
200004dc:	4770      	bx	lr
200004de:	e7ff      	b.n	200004e0 <__udivsi3+0x100>
200004e0:	b501      	push	{r0, lr}
200004e2:	2000      	movs	r0, #0
200004e4:	f000 f806 	bl	200004f4 <__aeabi_idiv0>
200004e8:	bd02      	pop	{r1, pc}
200004ea:	46c0      	nop			; (mov r8, r8)

200004ec <__aeabi_uidivmod>:
200004ec:	2900      	cmp	r1, #0
200004ee:	d0f7      	beq.n	200004e0 <__udivsi3+0x100>
200004f0:	e776      	b.n	200003e0 <__udivsi3>
200004f2:	4770      	bx	lr

200004f4 <__aeabi_idiv0>:
200004f4:	4770      	bx	lr
200004f6:	46c0      	nop			; (mov r8, r8)
200004f8:	00003433 	andeq	r3, r0, r3, lsr r4
200004fc:	61666c41 	cmnvs	r6, r1, asr #24
20000500:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20000504:	6b736972 	blvs	21cdaad4 <__aeabi_idiv0+0x1cda5e0>
20000508:	00000020 	andeq	r0, r0, r0, lsr #32
2000050c:	70736944 	rsbsvc	r6, r3, r4, asr #18
20000510:	2079616c 	rsbscs	r6, r9, ip, ror #2
20000514:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
20000518:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000332 	andeq	r0, r0, r2, lsr r3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000071 	andeq	r0, r0, r1, ror r0
  10:	0001af0c 	andeq	sl, r1, ip, lsl #30
  14:	00013400 	andeq	r3, r1, r0, lsl #8
	...
  24:	01880200 	orreq	r0, r8, r0, lsl #4
  28:	e4010000 	str	r0, [r1], #-0
  2c:	00038e06 	andeq	r8, r3, r6, lsl #28
  30:	00005220 	andeq	r5, r0, r0, lsr #4
  34:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
  38:	03000000 	movweq	r0, #0
  3c:	e6010073 			; <UNDEFINED> instruction: 0xe6010073
  40:	00006408 	andeq	r6, r0, r8, lsl #8
  44:	01a30400 			; <UNDEFINED> instruction: 0x01a30400
  48:	e7010000 	str	r0, [r1, -r0]
  4c:	00007107 	andeq	r7, r0, r7, lsl #2
  50:	60910200 	addsvs	r0, r1, r0, lsl #4
  54:	0001a904 	andeq	sl, r1, r4, lsl #18
  58:	07e80100 	strbeq	r0, [r8, r0, lsl #2]!
  5c:	00000088 	andeq	r0, r0, r8, lsl #1
  60:	00509102 	subseq	r9, r0, r2, lsl #2
  64:	006a0405 	rsbeq	r0, sl, r5, lsl #8
  68:	01060000 	mrseq	r0, (UNDEF: 6)
  6c:	00018308 	andeq	r8, r1, r8, lsl #6
  70:	006a0700 	rsbeq	r0, sl, r0, lsl #14
  74:	00810000 	addeq	r0, r1, r0
  78:	81080000 	mrshi	r0, (UNDEF: 8)
  7c:	0d000000 	stceq	0, cr0, [r0, #-0]
  80:	07040600 	streq	r0, [r4, -r0, lsl #12]
  84:	00000019 	andeq	r0, r0, r9, lsl r0
  88:	00006a07 	andeq	r6, r0, r7, lsl #20
  8c:	00009800 	andeq	r9, r0, r0, lsl #16
  90:	00810800 	addeq	r0, r1, r0, lsl #16
  94:	000e0000 	andeq	r0, lr, r0
  98:	00000c02 	andeq	r0, r0, r2, lsl #24
  9c:	06da0100 	ldrbeq	r0, [sl], r0, lsl #2
  a0:	2000034c 	andcs	r0, r0, ip, asr #6
  a4:	00000042 	andeq	r0, r0, r2, asr #32
  a8:	00dc9c01 	sbcseq	r9, ip, r1, lsl #24
  ac:	72090000 	andvc	r0, r9, #0
  b0:	0100776f 	tsteq	r0, pc, ror #14
  b4:	00dc21da 	ldrsbeq	r2, [ip], #26
  b8:	91020000 	mrsls	r0, (UNDEF: 2)
  bc:	6f63096f 	svcvs	0x0063096f
  c0:	da01006c 	ble	40278 <startup-0x1ffbfd88>
  c4:	0000dc34 	andeq	sp, r0, r4, lsr ip
  c8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
  cc:	00011c04 	andeq	r1, r1, r4, lsl #24
  d0:	0fdc0100 	svceq	0x00dc0100
  d4:	00000081 	andeq	r0, r0, r1, lsl #1
  d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
  dc:	7a080106 	bvc	2004fc <startup-0x1fdffb04>
  e0:	02000001 	andeq	r0, r0, #1
  e4:	00000203 	andeq	r0, r0, r3, lsl #4
  e8:	1006cf01 	andne	ip, r6, r1, lsl #30
  ec:	3c200003 	stccc	0, cr0, [r0], #-12
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	0001079c 	muleq	r1, ip, r7
  f8:	00630900 	rsbeq	r0, r3, r0, lsl #18
  fc:	dc25cf01 	stcle	15, cr12, [r5], #-4
 100:	02000000 	andeq	r0, r0, #0
 104:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 108:	0000018d 	andeq	r0, r0, sp, lsl #3
 10c:	bc06c101 	stfltd	f4, [r6], {1}
 110:	54200002 	strtpl	r0, [r0], #-2
 114:	01000000 	mrseq	r0, (UNDEF: 0)
 118:	00012d9c 	muleq	r1, ip, sp
 11c:	01930a00 	orrseq	r0, r3, r0, lsl #20
 120:	c1010000 	mrsgt	r0, (UNDEF: 1)
 124:	0000dc22 	andeq	sp, r0, r2, lsr #24
 128:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 12c:	01240b00 			; <UNDEFINED> instruction: 0x01240b00
 130:	b3010000 	movwlt	r0, #4096	; 0x1000
 134:	0000dc0f 	andeq	sp, r0, pc, lsl #24
 138:	00027c00 	andeq	r7, r2, r0, lsl #24
 13c:	00004020 	andeq	r4, r0, r0, lsr #32
 140:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
 144:	0c000001 	stceq	0, cr0, [r0], {1}
 148:	b5010063 	strlt	r0, [r1, #-99]	; 0xffffff9d
 14c:	00006a07 	andeq	r6, r0, r7, lsl #20
 150:	6f910200 	svcvs	0x00910200
 154:	00ed0d00 	rsceq	r0, sp, r0, lsl #26
 158:	a6010000 	strge	r0, [r1], -r0
 15c:	0000dc0f 	andeq	sp, r0, pc, lsl #24
 160:	00023c00 	andeq	r3, r2, r0, lsl #24
 164:	00004020 	andeq	r4, r0, r0, lsr #32
 168:	7d9c0100 	ldfvcs	f0, [ip]
 16c:	0c000001 	stceq	0, cr0, [r0], {1}
 170:	a7010063 	strge	r0, [r1, -r3, rrx]
 174:	00006a07 	andeq	r6, r0, r7, lsl #20
 178:	6f910200 	svcvs	0x00910200
 17c:	003b0b00 	eorseq	r0, fp, r0, lsl #22
 180:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 184:	0000dc0f 	andeq	sp, r0, pc, lsl #24
 188:	00020800 	andeq	r0, r2, r0, lsl #16
 18c:	00003420 	andeq	r3, r0, r0, lsr #8
 190:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
 194:	0c000001 	stceq	0, cr0, [r0], {1}
 198:	9a010063 	bls	4032c <startup-0x1ffbfcd4>
 19c:	00006a07 	andeq	r6, r0, r7, lsl #20
 1a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1a4:	00ff0200 	rscseq	r0, pc, r0, lsl #4
 1a8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 1ac:	0001de06 	andeq	sp, r1, r6, lsl #28
 1b0:	00002a20 	andeq	r2, r0, r0, lsr #20
 1b4:	cb9c0100 	blgt	fe7005bc <__aeabi_idiv0+0xde7000c8>
 1b8:	0a000001 	beq	1c4 <startup-0x1ffffe3c>
 1bc:	0000012f 	andeq	r0, r0, pc, lsr #2
 1c0:	dc258e01 	stcle	14, cr8, [r5], #-4
 1c4:	02000000 	andeq	r0, r0, #0
 1c8:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 1cc:	000001f3 	strdeq	r0, [r0], -r3
 1d0:	b4068301 	strlt	r8, [r6], #-769	; 0xfffffcff
 1d4:	2a200001 	bcs	8001e0 <startup-0x1f7ffe20>
 1d8:	01000000 	mrseq	r0, (UNDEF: 0)
 1dc:	0001f19c 	muleq	r1, ip, r1
 1e0:	01930a00 	orrseq	r0, r3, r0, lsl #20
 1e4:	83010000 	movwhi	r0, #4096	; 0x1000
 1e8:	0000dc24 	andeq	sp, r0, r4, lsr #24
 1ec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1f0:	00510200 	subseq	r0, r1, r0, lsl #4
 1f4:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
 1f8:	00018406 	andeq	r8, r1, r6, lsl #8
 1fc:	00003020 	andeq	r3, r0, r0, lsr #32
 200:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
 204:	09000002 	stmdbeq	r0, {r1}
 208:	79010063 	stmdbvc	r1, {r0, r1, r5, r6}
 20c:	00006a22 	andeq	r6, r0, r2, lsr #20
 210:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 214:	00260e00 	eoreq	r0, r6, r0, lsl #28
 218:	70010000 	andvc	r0, r1, r0
 21c:	00013c06 	andeq	r3, r1, r6, lsl #24
 220:	00004820 	andeq	r4, r0, r0, lsr #16
 224:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
 228:	09000002 	stmdbeq	r0, {r1}
 22c:	70010078 	andvc	r0, r1, r8, ror r0
 230:	0000dc29 	andeq	sp, r0, r9, lsr #24
 234:	6f910200 	svcvs	0x00910200
 238:	0100630c 	tsteq	r0, ip, lsl #6
 23c:	006a0771 	rsbeq	r0, sl, r1, ror r7
 240:	91020000 	mrsls	r0, (UNDEF: 2)
 244:	140e0077 	strne	r0, [lr], #-119	; 0xffffff89
 248:	01000002 	tsteq	r0, r2
 24c:	01020667 	tsteq	r2, r7, ror #12
 250:	003a2000 	eorseq	r2, sl, r0
 254:	9c010000 	stcls	0, cr0, [r1], {-0}
 258:	00000277 	andeq	r0, r0, r7, ror r2
 25c:	01007809 	tsteq	r0, r9, lsl #16
 260:	00dc2767 	sbcseq	r2, ip, r7, ror #14
 264:	91020000 	mrsls	r0, (UNDEF: 2)
 268:	00630c6f 	rsbeq	r0, r3, pc, ror #24
 26c:	6a076801 	bvs	1da278 <startup-0x1fe25d88>
 270:	02000000 	andeq	r0, r0, #0
 274:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 278:	00000000 	andeq	r0, r0, r0
 27c:	de065f01 	cdple	15, 0, cr5, cr6, cr1, {0}
 280:	24200000 	strtcs	r0, [r0], #-0
 284:	01000000 	mrseq	r0, (UNDEF: 0)
 288:	00029c9c 	muleq	r2, ip, ip
 28c:	736d0900 	cmnvc	sp, #0, 18
 290:	1f5f0100 	svcne	0x005f0100
 294:	00000081 	andeq	r0, r0, r1, lsl #1
 298:	00749102 	rsbseq	r9, r4, r2, lsl #2
 29c:	00016e02 	andeq	r6, r1, r2, lsl #28
 2a0:	064b0100 	strbeq	r0, [fp], -r0, lsl #2
 2a4:	20000098 	mulcs	r0, r8, r0
 2a8:	00000046 	andeq	r0, r0, r6, asr #32
 2ac:	02c19c01 	sbceq	r9, r1, #256	; 0x100
 2b0:	75090000 	strvc	r0, [r9, #-0]
 2b4:	4b010073 	blmi	40488 <startup-0x1ffbfb78>
 2b8:	0000811f 	andeq	r8, r0, pc, lsl r1
 2bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2c0:	01100f00 	tsteq	r0, r0, lsl #30
 2c4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 2c8:	00005606 	andeq	r5, r0, r6, lsl #12
 2cc:	00004220 	andeq	r4, r0, r0, lsr #4
 2d0:	109c0100 	addsne	r0, ip, r0, lsl #2
 2d4:	00000227 	andeq	r0, r0, r7, lsr #4
 2d8:	28063101 	stmdacs	r6, {r0, r8, ip, sp}
 2dc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 2e0:	01000000 	mrseq	r0, (UNDEF: 0)
 2e4:	00030a9c 	muleq	r3, ip, sl
 2e8:	00261100 	eoreq	r1, r6, r0, lsl #2
 2ec:	33010000 	movwcc	r0, #4096	; 0x1000
 2f0:	00030a05 	andeq	r0, r3, r5, lsl #20
 2f4:	0002fb00 	andeq	pc, r2, r0, lsl #22
 2f8:	13001200 	movwne	r1, #512	; 0x200
 2fc:	0000018d 	andeq	r0, r0, sp, lsl #3
 300:	0a053501 	beq	14d70c <startup-0x1feb28f4>
 304:	12000003 	andne	r0, r0, #3
 308:	04140000 	ldreq	r0, [r4], #-0
 30c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 310:	00681500 	rsbeq	r1, r8, r0, lsl #10
 314:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 318:	00001006 	andeq	r1, r0, r6
 31c:	00001820 	andeq	r1, r0, r0, lsr #16
 320:	0f9c0100 	svceq	0x009c0100
 324:	0000019b 	muleq	r0, fp, r1
 328:	00061e01 	andeq	r1, r6, r1, lsl #28
 32c:	0c200000 	stceq	0, cr0, [r0], #-0
 330:	01000000 	mrseq	r0, (UNDEF: 0)
 334:	Address 0x00000334 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	01111927 	tsteq	r1, r7, lsr #18
  24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  28:	01194296 			; <UNDEFINED> instruction: 0x01194296
  2c:	03000013 	movweq	r0, #19
  30:	08030034 	stmdaeq	r3, {r2, r4, r5}
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13490b39 	movtne	r0, #39737	; 0x9b39
  3c:	34040000 	strcc	r0, [r4], #-0
  40:	3a0e0300 	bcc	380c48 <startup-0x1fc7f3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  4c:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  50:	0b0b000f 	bleq	2c0094 <startup-0x1fd3ff6c>
  54:	00001349 	andeq	r1, r0, r9, asr #6
  58:	0b002406 	bleq	9078 <startup-0x1fff6f88>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	0700000e 	streq	r0, [r0, -lr]
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002108 	stmdbmi	r0, {r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	00050900 	andeq	r0, r5, r0, lsl #18
  78:	0b3a0803 	bleq	e8208c <startup-0x1f17df74>
  7c:	0b390b3b 	bleq	e42d70 <startup-0x1f1bd290>
  80:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  84:	050a0000 	streq	r0, [sl, #-0]
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  94:	0b000018 	bleq	fc <startup-0x1fffff04>
  98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  9c:	0b3a0e03 	bleq	e838b0 <startup-0x1f17c750>
  a0:	0b390b3b 	bleq	e42d94 <startup-0x1f1bd26c>
  a4:	13491927 	movtne	r1, #39207	; 0x9927
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b0:	00130119 	andseq	r0, r3, r9, lsl r1
  b4:	00340c00 	eorseq	r0, r4, r0, lsl #24
  b8:	0b3a0803 	bleq	e820cc <startup-0x1f17df34>
  bc:	0b390b3b 	bleq	e42db0 <startup-0x1f1bd250>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  c8:	03193f01 	tsteq	r9, #1, 30
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  d4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  d8:	96184006 	ldrls	r4, [r8], -r6
  dc:	13011942 	movwne	r1, #6466	; 0x1942
  e0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  e4:	03193f01 	tsteq	r9, #1, 30
  e8:	3b0b3a0e 	blcc	2ce928 <startup-0x1fd316d8>
  ec:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  f4:	97184006 	ldrls	r4, [r8, -r6]
  f8:	13011942 	movwne	r1, #6466	; 0x1942
  fc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 100:	03193f00 	tsteq	r9, #0, 30
 104:	3b0b3a0e 	blcc	2ce944 <startup-0x1fd316bc>
 108:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 10c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 110:	97184006 	ldrls	r4, [r8, -r6]
 114:	00001942 	andeq	r1, r0, r2, asr #18
 118:	3f012e10 	svccc	0x00012e10
 11c:	3a0e0319 	bcc	380d88 <startup-0x1fc7f278>
 120:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 124:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 134:	03193f01 	tsteq	r9, #1, 30
 138:	3b0b3a0e 	blcc	2ce978 <startup-0x1fd31688>
 13c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 140:	01193c13 	tsteq	r9, r3, lsl ip
 144:	12000013 	andne	r0, r0, #19
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	3f012e13 	svccc	0x00012e13
 150:	3a0e0319 	bcc	380dbc <startup-0x1fc7f244>
 154:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 158:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 15c:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
 160:	0b0b0024 	bleq	2c01f8 <startup-0x1fd3fe08>
 164:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 168:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 16c:	03193f00 	tsteq	r9, #0, 30
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	110b390b 	tstne	fp, fp, lsl #18
 178:	40061201 	andmi	r1, r6, r1, lsl #4
 17c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 180:	Address 0x00000180 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200003e0 	andcs	r0, r0, r0, ror #7
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000218 	andeq	r0, r0, r8, lsl r2
   4:	005a0003 	subseq	r0, sl, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	554b2f3a 	strbpl	r2, [fp, #-3898]	; 0xfffff0c6
  20:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
  24:	73614d2f 	cmnvc	r1, #3008	; 0xbc0
  28:	4f6e696b 	svcmi	0x006e696b
  2c:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
  30:	61726574 	cmnvs	r2, r4, ror r5
  34:	6f725064 	svcvs	0x00725064
  38:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
  3c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
  40:	4c2f676e 	stcmi	7, cr6, [pc], #-440	; fffffe90 <__aeabi_idiv0+0xdffff99c>
  44:	2f326261 	svccs	0x00326261
  48:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  4c:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
  50:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  54:	74730000 	ldrbtvc	r0, [r3], #-0
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  60:	00000001 	andeq	r0, r0, r1
  64:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  68:	00000002 	andeq	r0, r0, r2
  6c:	011e0320 	tsteq	lr, r0, lsr #6
  70:	2f212113 	svccs	0x00212113
  74:	00030221 	andeq	r0, r3, r1, lsr #4
  78:	01050101 	tsteq	r5, r1, lsl #2
  7c:	10020500 	andne	r0, r2, r0, lsl #10
  80:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  84:	02050129 	andeq	r0, r5, #1073741834	; 0x4000000a
  88:	2010052f 	andscs	r0, r0, pc, lsr #10
  8c:	7a2f0105 	bvc	bc04a8 <startup-0x1f43fb58>
  90:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 84 <startup-0x1fffff7c>
  94:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  98:	423d0105 	eorsmi	r0, sp, #1073741825	; 0x40000001
  9c:	052f0205 	streq	r0, [pc, #-517]!	; fffffe9f <__aeabi_idiv0+0xdffff9ab>
  a0:	0205200c 	andeq	r2, r5, #12
  a4:	200c052f 	andcs	r0, ip, pc, lsr #10
  a8:	052f0205 	streq	r0, [pc, #-517]!	; fffffeab <__aeabi_idiv0+0xdffff9b7>
  ac:	0205200b 	andeq	r2, r5, #11
  b0:	200c052f 	andcs	r0, ip, pc, lsr #10
  b4:	052f0705 	streq	r0, [pc, #-1797]!	; fffff9b7 <__aeabi_idiv0+0xdffff4c3>
  b8:	0402000a 	streq	r0, [r2], #-10
  bc:	14052001 	strne	r2, [r5], #-1
  c0:	01040200 	mrseq	r0, R12_usr
  c4:	0007052e 	andeq	r0, r7, lr, lsr #10
  c8:	3c010402 	cfstrscc	mvf0, [r1], {2}
  cc:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
  d0:	0105200c 	tsteq	r5, ip
  d4:	0605962f 	streq	r9, [r5], -pc, lsr #12
  d8:	8305054c 	movwhi	r0, #21836	; 0x554c
  dc:	053f0705 	ldreq	r0, [pc, #-1797]!	; fffff9df <__aeabi_idiv0+0xdffff4eb>
  e0:	2f2f2203 	svccs	0x002f2203
  e4:	2f05052f 	svccs	0x0005052f
  e8:	7a030705 	bvc	c1d04 <startup-0x1ff3e2fc>
  ec:	4401053c 	strmi	r0, [r1], #-1340	; 0xfffffac4
  f0:	4b02055e 	blmi	81670 <startup-0x1ff7e990>
  f4:	059f0105 	ldreq	r0, [pc, #261]	; 201 <startup-0x1ffffdff>
  f8:	09054f2a 	stmdbeq	r5, {r1, r3, r5, r8, r9, sl, fp, lr}
  fc:	20070568 	andcs	r0, r7, r8, ror #10
 100:	054b1505 	strbeq	r1, [fp, #-1285]	; 0xfffffafb
 104:	15056605 	strne	r6, [r5, #-1541]	; 0xfffff9fb
 108:	4b010520 	blmi	41590 <startup-0x1ffbea70>
 10c:	05792c05 	ldrbeq	r2, [r9, #-3077]!	; 0xfffff3fb
 110:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
 114:	4b080520 	blmi	20159c <startup-0x1fdfea64>
 118:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
 11c:	12052f02 	andne	r2, r5, #2, 30
 120:	67010520 	strvs	r0, [r1, -r0, lsr #10]
 124:	056a2505 	strbeq	r2, [sl, #-1285]!	; 0xfffffafb
 128:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
 12c:	02052013 	andeq	r2, r5, #19
 130:	01053d3d 	tsteq	r5, sp, lsr sp
 134:	02056c2f 	andeq	r6, r5, #12032	; 0x2f00
 138:	053e3d67 	ldreq	r3, [lr, #-3431]!	; 0xfffff299
 13c:	05505901 	ldrbeq	r5, [r0, #-2305]	; 0xfffff6ff
 140:	3e3d6702 	cdpcc	7, 3, cr6, cr13, cr2, {0}
 144:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 148:	02054f2b 	andeq	r4, r5, #43, 30	; 0xac
 14c:	052f3d3e 	streq	r3, [pc, #-3390]!	; fffff416 <__aeabi_idiv0+0xdfffef22>
 150:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
 154:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 158:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 15c:	23052f01 	movwcs	r2, #24321	; 0x5f01
 160:	3e020579 	cfrshl64cc	mvdx2, mvdx9, r0
 164:	05201005 	streq	r1, [r0, #-5]!
 168:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 16c:	02053d06 	andeq	r3, r5, #384	; 0x180
 170:	20100559 	andscs	r0, r0, r9, asr r5
 174:	052f0905 	streq	r0, [pc, #-2309]!	; fffff877 <__aeabi_idiv0+0xdffff383>
 178:	05a42f01 	streq	r2, [r4, #3841]!	; 0xf01
 17c:	10053e02 	andne	r3, r5, r2, lsl #28
 180:	2f020520 	svccs	0x00020520
 184:	3d06053d 	cfstr32cc	mvfx0, [r6, #-244]	; 0xffffff0c
 188:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 18c:	09052010 	stmdbeq	r5, {r4, sp}
 190:	2f01052f 	svccs	0x0001052f
 194:	670705a4 	strvs	r0, [r7, -r4, lsr #11]
 198:	02000905 	andeq	r0, r0, #81920	; 0x14000
 19c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 1a0:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 1a4:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 1a8:	01040200 	mrseq	r0, R12_usr
 1ac:	2f02053c 	svccs	0x0002053c
 1b0:	5a04053d 	bpl	1016ac <startup-0x1fefe954>
 1b4:	02001f05 	andeq	r1, r0, #5, 30
 1b8:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 1bc:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 1c0:	2c054a02 			; <UNDEFINED> instruction: 0x2c054a02
 1c4:	03040200 	movweq	r0, #16896	; 0x4200
 1c8:	4c070520 	cfstr32mi	mvfx0, [r7], {32}
 1cc:	423d0105 	eorsmi	r0, sp, #1073741825	; 0x40000001
 1d0:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 1d4:	04020009 	streq	r0, [r2], #-9
 1d8:	1d052001 	stcne	0, cr2, [r5, #-4]
 1dc:	01040200 	mrseq	r0, R12_usr
 1e0:	0007053c 	andeq	r0, r7, ip, lsr r5
 1e4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1e8:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1dc <startup-0x1ffffe24>
 1ec:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 1f0:	911d0550 	tstls	sp, r0, asr r5
 1f4:	053c0f05 	ldreq	r0, [ip, #-3845]!	; 0xfffff0fb
 1f8:	17052104 	strne	r2, [r5, -r4, lsl #2]
 1fc:	01040200 	mrseq	r0, R12_usr
 200:	3d02054a 	cfstr32cc	mvfx0, [r2, #-296]	; 0xfffffed8
 204:	50910105 	addspl	r0, r1, r5, lsl #2
 208:	753e0705 	ldrvc	r0, [lr, #-1797]!	; 0xfffff8fb
 20c:	2f830205 	svccs	0x00830205
 210:	01054b2f 	tsteq	r5, pc, lsr #22
 214:	02580903 	subseq	r0, r8, #49152	; 0xc000
 218:	0101000a 	tsteq	r1, sl

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	736e7500 	cmnvc	lr, #0, 10
  1c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  20:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  24:	73610074 	cmnvc	r1, #116	; 0x74
  28:	5f696963 	svcpl	0x00696963
  2c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  34:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  38:	61007261 	tstvs	r0, r1, ror #4
  3c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  40:	6165725f 	cmnvs	r5, pc, asr r2
  44:	6f635f64 	svcvs	0x00635f64
  48:	6f72746e 	svcvs	0x0072746e
  4c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  50:	63736100 	cmnvs	r3, #0, 2
  54:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  58:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  5c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  60:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffe98 <__aeabi_idiv0+0xdffff9a4>
  64:	0072656c 	rsbseq	r6, r2, ip, ror #10
  68:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  6c:	7070615f 	rsbsvc	r6, r0, pc, asr r1
  70:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  74:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  78:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  7c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  80:	31393130 	teqcc	r9, r0, lsr r1
  84:	20353230 	eorscs	r3, r5, r0, lsr r2
  88:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  8c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  90:	415b2029 	cmpmi	fp, r9, lsr #32
  94:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  98:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  9c:	6172622d 	cmnvs	r2, sp, lsr #4
  a0:	2068636e 	rsbcs	r6, r8, lr, ror #6
  a4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  a8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  ac:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  b0:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
  b4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  bc:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  c0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  c4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  c8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  cc:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  d0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  d4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  d8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  dc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  e0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  e4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  e8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  ec:	63736100 	cmnvs	r3, #0, 2
  f0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
  f4:	5f646165 	svcpl	0x00646165
  f8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  fc:	61007375 	tstvs	r0, r5, ror r3
 100:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 104:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 108:	645f6574 	ldrbvs	r6, [pc], #-1396	; 110 <startup-0x1ffffef0>
 10c:	00617461 	rsbeq	r7, r1, r1, ror #8
 110:	616c6564 	cmnvs	ip, r4, ror #10
 114:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 118:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 11c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 120:	00737365 	rsbseq	r7, r3, r5, ror #6
 124:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 128:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 12c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 134 <startup-0x1ffffecc>
 130:	00617461 	rsbeq	r7, r1, r1, ror #8
 134:	4b5c3a44 	blmi	170ea4c <startup-0x1e8f15b4>
 138:	45535255 	ldrbmi	r5, [r3, #-597]	; 0xfffffdab
 13c:	614d5c52 	cmpvs	sp, r2, asr ip
 140:	6e696b73 	vmovvs.8	d9[7], r6
 144:	6569724f 	strbvs	r7, [r9, #-591]!	; 0xfffffdb1
 148:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 14c:	72506461 	subsvc	r6, r0, #1627389952	; 0x61000000
 150:	6172676f 	cmnvs	r2, pc, ror #14
 154:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 158:	5c676e69 	stclpl	14, cr6, [r7], #-420	; 0xfffffe5c
 15c:	3262614c 	rsbcc	r6, r2, #76, 2
 160:	6373615c 	cmnvs	r3, #92, 2
 164:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 168:	616c7073 	smcvs	50947	; 0xc703
 16c:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 170:	5f79616c 	svcpl	0x0079616c
 174:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 178:	6e75006f 	cdpvs	0, 7, cr0, cr5, cr15, {3}
 17c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 180:	63206465 			; <UNDEFINED> instruction: 0x63206465
 184:	00726168 	rsbseq	r6, r2, r8, ror #2
 188:	6e69616d 	powvsez	f6, f1, #5.0
 18c:	63736100 	cmnvs	r3, #0, 2
 190:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 194:	616d6d6f 	cmnvs	sp, pc, ror #26
 198:	7300646e 	movwvc	r6, #1134	; 0x46e
 19c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1a0:	74007075 	strvc	r7, [r0], #-117	; 0xffffff8b
 1a4:	31747365 	cmncc	r4, r5, ror #6
 1a8:	73657400 	cmnvc	r5, #0, 8
 1ac:	44003274 	strmi	r3, [r0], #-628	; 0xfffffd8c
 1b0:	554b2f3a 	strbpl	r2, [fp, #-3898]	; 0xfffff0c6
 1b4:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
 1b8:	73614d2f 	cmnvc	r1, #3008	; 0xbc0
 1bc:	4f6e696b 	svcmi	0x006e696b
 1c0:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 1c4:	61726574 	cmnvs	r2, r4, ror r5
 1c8:	6f725064 	svcvs	0x00725064
 1cc:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 1d0:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 1d4:	4c2f676e 	stcmi	7, cr6, [pc], #-440	; 24 <startup-0x1fffffdc>
 1d8:	2f326261 	svccs	0x00326261
 1dc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1e0:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 1e4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1e8:	6174732f 	cmnvs	r4, pc, lsr #6
 1ec:	70757472 	rsbsvc	r7, r5, r2, ror r4
 1f0:	6100632e 	tstvs	r0, lr, lsr #6
 1f4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1f8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1fc:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 200:	6100646d 	tstvs	r0, sp, ror #8
 204:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 208:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 20c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 210:	00726168 	rsbseq	r6, r2, r8, ror #2
 214:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 218:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 21c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 220:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 224:	61007465 	tstvs	r0, r5, ror #8
 228:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 22c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 230:	Address 0x00000230 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	0000002e 	andeq	r0, r0, lr, lsr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000056 	andcs	r0, r0, r6, asr r0
  64:	00000042 	andeq	r0, r0, r2, asr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0000070d 	andeq	r0, r0, sp, lsl #14
  74:	0000001c 	andeq	r0, r0, ip, lsl r0
  78:	00000000 	andeq	r0, r0, r0
  7c:	20000098 	mulcs	r0, r8, r0
  80:	00000046 	andeq	r0, r0, r6, asr #32
  84:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  88:	41018e02 	tstmi	r1, r2, lsl #28
  8c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  90:	00000007 	andeq	r0, r0, r7
  94:	0000001c 	andeq	r0, r0, ip, lsl r0
  98:	00000000 	andeq	r0, r0, r0
  9c:	200000de 	ldrdcs	r0, [r0], -lr
  a0:	00000024 	andeq	r0, r0, r4, lsr #32
  a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a8:	41018e02 	tstmi	r1, r2, lsl #28
  ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b0:	00000007 	andeq	r0, r0, r7
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	20000102 	andcs	r0, r0, r2, lsl #2
  c0:	0000003a 	andeq	r0, r0, sl, lsr r0
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	2000013c 	andcs	r0, r0, ip, lsr r1
  e0:	00000048 	andeq	r0, r0, r8, asr #32
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	20000184 	andcs	r0, r0, r4, lsl #3
 100:	00000030 	andeq	r0, r0, r0, lsr r0
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001b4 			; <UNDEFINED> instruction: 0x200001b4
 120:	0000002a 	andeq	r0, r0, sl, lsr #32
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 130:	00000007 	andeq	r0, r0, r7
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	200001de 	ldrdcs	r0, [r0], -lr
 140:	0000002a 	andeq	r0, r0, sl, lsr #32
 144:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 148:	41018e02 	tstmi	r1, r2, lsl #28
 14c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 150:	00000007 	andeq	r0, r0, r7
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	20000208 	andcs	r0, r0, r8, lsl #4
 160:	00000034 	andeq	r0, r0, r4, lsr r0
 164:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 168:	41018e02 	tstmi	r1, r2, lsl #28
 16c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 170:	00000007 	andeq	r0, r0, r7
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000023c 	andcs	r0, r0, ip, lsr r2
 180:	00000040 	andeq	r0, r0, r0, asr #32
 184:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 188:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	2000027c 	andcs	r0, r0, ip, ror r2
 1a0:	00000040 	andeq	r0, r0, r0, asr #32
 1a4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 1c0:	00000054 	andeq	r0, r0, r4, asr r0
 1c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c8:	41018e02 	tstmi	r1, r2, lsl #28
 1cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d0:	00000007 	andeq	r0, r0, r7
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000310 	andcs	r0, r0, r0, lsl r3
 1e0:	0000003c 	andeq	r0, r0, ip, lsr r0
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	2000034c 	andcs	r0, r0, ip, asr #6
 200:	00000042 	andeq	r0, r0, r2, asr #32
 204:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 208:	41018e02 	tstmi	r1, r2, lsl #28
 20c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 210:	00000007 	andeq	r0, r0, r7
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	2000038e 	andcs	r0, r0, lr, lsl #7
 220:	00000052 	andeq	r0, r0, r2, asr r0
 224:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 228:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 22c:	300e4101 	andcc	r4, lr, r1, lsl #2
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	0000000c 	andeq	r0, r0, ip
 238:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 23c:	7c010001 	stcvc	0, cr0, [r1], {1}
 240:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 244:	0000000c 	andeq	r0, r0, ip
 248:	00000234 	andeq	r0, r0, r4, lsr r2
 24c:	200003e1 	andcs	r0, r0, r1, ror #7
 250:	0000010a 	andeq	r0, r0, sl, lsl #2
